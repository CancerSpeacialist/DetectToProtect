"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Download, FileText } from "lucide-react";
import jsPDF from "jspdf";

interface PDFGeneratorProps {
  analysisResult: any;
  imageUrl: string;
  patientId: string;
  cancerType: string;
}

export function PDFGenerator({
  analysisResult,
  imageUrl,
  patientId,
  cancerType,
}: PDFGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);

    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Header
      pdf.setFontSize(20);
      pdf.setTextColor(0, 102, 204);
      pdf.text("Medical Imaging Analysis Report", pageWidth / 2, 30, {
        align: "center",
      });

      // Patient Information
      pdf.setFontSize(16);
      pdf.setTextColor(0, 102, 204);
      pdf.text("Patient Information", 20, 60);

      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Patient ID: ${patientId}`, 30, 75);
      pdf.text(
        `Scan Type: ${cancerType.replace("-", " ").toUpperCase()}`,
        30,
        85
      );
      pdf.text(`Analysis Date: ${new Date().toLocaleDateString()}`, 30, 95);
      pdf.text(`Report Generated: ${new Date().toLocaleString()}`, 30, 105);

      // Analysis Results
      pdf.setFontSize(16);
      pdf.setTextColor(0, 102, 204);
      pdf.text("Analysis Results", 20, 130);

      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(
        `Classification: ${analysisResult.classification.toUpperCase()}`,
        30,
        145
      );
      pdf.text(
        `Confidence Score: ${(analysisResult.confidence * 100).toFixed(1)}%`,
        30,
        155
      );

      if (analysisResult.processingTime) {
        pdf.text(
          `Processing Time: ${analysisResult.processingTime}ms`,
          30,
          165
        );
      }

      // Recommendations
      if (analysisResult.additionalInfo?.recommendations) {
        pdf.setFontSize(16);
        pdf.setTextColor(0, 102, 204);
        pdf.text("Recommendations", 20, 185);

        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        let yPos = 200;
        analysisResult.additionalInfo.recommendations.forEach(
          (rec: string, index: number) => {
            const lines = pdf.splitTextToSize(
              `${index + 1}. ${rec}`,
              pageWidth - 60
            );
            pdf.text(lines, 30, yPos);
            yPos += lines.length * 7;
          }
        );
      }

      // Disclaimer
      pdf.setFontSize(10);
      pdf.setTextColor(150, 150, 150);
      const disclaimerText =
        "DISCLAIMER: This report is generated by an AI system for testing purposes only. It should not be used for actual medical diagnosis or treatment decisions. Please consult with a qualified healthcare professional for medical advice.";
      const disclaimerLines = pdf.splitTextToSize(
        disclaimerText,
        pageWidth - 40
      );
      pdf.text(disclaimerLines, 20, pageHeight - 40);

      // Footer
      pdf.setFontSize(8);
      pdf.text(
        `Generated by DetectToProtect AI System v1.0 | ${new Date().toISOString()}`,
        pageWidth / 2,
        pageHeight - 10,
        { align: "center" }
      );

      // Save the PDF
      pdf.save(`${cancerType}-screening-report.pdf`);

      // Save metadata to backend
      await fetch("/api/save-report-metadata", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          patientId,
          cancerType,
          analysisResult,
          generatedAt: new Date().toISOString(),
        }),
      });
    } catch (error) {
      console.error("PDF generation error:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      onClick={generatePDF}
      disabled={isGenerating}
      variant="outline"
      className="w-full"
      size="lg"
    >
      <Download className="h-4 w-4 mr-2" />
      {isGenerating ? "Generating PDF..." : "Download PDF Report"}
    </Button>
  );
}
