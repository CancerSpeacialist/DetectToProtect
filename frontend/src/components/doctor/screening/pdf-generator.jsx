import { PDFDocument, rgb, StandardFonts } from "pdf-lib";
import fetch from "node-fetch";

// Helper to fetch image as Uint8Array
async function fetchImageBytes(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error("Failed to fetch image");
  return new Uint8Array(await res.arrayBuffer());
}

export async function generatePDFReport({
  inputImageUrl,
  resultImageUrl,
  aiResults,
  cancerType,
  patient,
  appointment,
  doctor,
}) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // A4 size

  // Fonts
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const bold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  let y = 800;

  // Header
  page.drawText("Medical Imaging AI Analysis Report", {
    x: 50,
    y,
    size: 22,
    font: bold,
    color: rgb(0, 0.3, 0.7),
  });
  y -= 40;

  // Patient & Appointment Info
  page.drawText("Patient Information:", { x: 50, y, size: 14, font: bold });
  y -= 20;
  page.drawText(
    `Name: ${patient?.firstName || ""} ${patient?.lastName || ""}`,
    { x: 60, y, size: 12, font }
  );
  y -= 16;
  page.drawText(`Patient ID: ${patient?.id || "N/A"}`, {
    x: 60,
    y,
    size: 12,
    font,
  });
  y -= 16;
  page.drawText(`Appointment ID: ${appointment?.id || "N/A"}`, {
    x: 60,
    y,
    size: 12,
    font,
  });
  y -= 16;
  page.drawText(
    `Date: ${
      appointment?.appointmentDate
        ? new Date(appointment.appointmentDate.seconds * 1000).toLocaleString()
        : new Date().toLocaleString()
    }`,
    { x: 60, y, size: 12, font }
  );
  y -= 24;

  // Doctor Info
  if (doctor) {
    page.drawText("Doctor:", { x: 50, y, size: 14, font: bold });
    y -= 20;
    page.drawText(
      `Name: Dr. ${doctor.firstName || ""} ${doctor.lastName || ""}`,
      { x: 60, y, size: 12, font }
    );
    y -= 16;
    page.drawText(`Doctor ID: ${doctor.id || doctor.uid || ""}`, {
      x: 60,
      y,
      size: 12,
      font,
    });
    y -= 24;
  }

  // Cancer Type & AI Model
  page.drawText("Screening Details:", { x: 50, y, size: 14, font: bold });
  y -= 20;
  page.drawText(`Cancer Type: ${cancerType}`, { x: 60, y, size: 12, font });
  y -= 16;
  page.drawText(
    `AI Model Version: ${
      aiResults?.aiModelVersion || aiResults?.modelVersion || "N/A"
    }`,
    { x: 60, y, size: 12, font }
  );
  y -= 24;

  // AI Results
  page.drawText("AI Analysis Results:", { x: 50, y, size: 14, font: bold });
  y -= 20;
  page.drawText(`Classification: ${aiResults?.classification || "N/A"}`, {
    x: 60,
    y,
    size: 12,
    font,
  });
  y -= 16;
  page.drawText(
    `Confidence: ${aiResults?.confidence ? aiResults.confidence + "%" : "N/A"}`,
    { x: 60, y, size: 12, font }
  );
  y -= 16;
  if (aiResults?.additionalFindings?.length) {
    page.drawText("Findings:", { x: 60, y, size: 12, font: bold });
    y -= 16;
    aiResults.additionalFindings.forEach((finding) => {
      page.drawText(`- ${finding}`, { x: 70, y, size: 11, font });
      y -= 14;
    });
  }
  y -= 10;

  // Doctor Review
  if (aiResults?.doctorReview) {
    page.drawText("Doctor's Review:", { x: 50, y, size: 14, font: bold });
    y -= 18;
    page.drawText(aiResults.doctorReview, { x: 60, y, size: 12, font });
    y -= 24;
  }

  // Images
  if (inputImageUrl) {
    try {
      const inputImgBytes = await fetchImageBytes(inputImageUrl);
      const inputImg = await pdfDoc
        .embedJpg(inputImgBytes)
        .catch(() => pdfDoc.embedPng(inputImgBytes));
      page.drawText("Input Image:", { x: 50, y, size: 12, font: bold });
      y -= 120;
      page.drawImage(inputImg, { x: 50, y, width: 200, height: 100 });
      y -= 20;
    } catch (e) {
      page.drawText("Input image could not be loaded.", {
        x: 50,
        y,
        size: 10,
        font,
      });
      y -= 20;
    }
  }
  if (resultImageUrl) {
    try {
      const resultImgBytes = await fetchImageBytes(resultImageUrl);
      const resultImg = await pdfDoc
        .embedJpg(resultImgBytes)
        .catch(() => pdfDoc.embedPng(resultImgBytes));
      page.drawText("Result Image:", {
        x: 300,
        y: y + 120,
        size: 12,
        font: bold,
      });
      page.drawImage(resultImg, { x: 300, y, width: 200, height: 100 });
      y -= 20;
    } catch (e) {
      page.drawText("Result image could not be loaded.", {
        x: 300,
        y,
        size: 10,
        font,
      });
      y -= 20;
    }
  }

  // Footer & Disclaimer
  page.drawText(
    "Disclaimer: This report is generated by an AI system and is for informational purposes only. Please consult a qualified medical professional for diagnosis and treatment.",
    { x: 50, y: 40, size: 9, font, color: rgb(0.5, 0.1, 0.1) }
  );
  page.drawText(`Generated: ${new Date().toLocaleString()}`, {
    x: 50,
    y: 25,
    size: 8,
    font,
  });

  // Serialize PDF
  const pdfBytes = await pdfDoc.save();
  return pdfBytes; // Uint8Array, can be uploaded or sent as a file
}
